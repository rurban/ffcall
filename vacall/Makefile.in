# Makefile for vacall

#### Start of system configuration section. ####

HOST = @host@
CPU = @host_cpu@
OS = @host_os@

# Directories used by "make":
srcdir = @srcdir@

# Directories used by "make install":
prefix = @prefix@
local_prefix = /usr/local
exec_prefix = $(prefix)
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
mandir = $(exec_prefix)/man

# Programs used by "make":
CC = @CC@
CFLAGS = @CFLAGS@
CPP = @CPP@
INCLUDES = -I. -I$(srcdir)
ASPFLAGS = `if test @AS_UNDERSCORE@ = true; then echo '-DASM_UNDERSCORE'; fi`
AR = ar
AR_FLAGS = rc
RANLIB = @RANLIB@
MV = mv
LN = ln
RM = rm -f
@SET_MAKE@

# Programs used by "make install":
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

#### End of system configuration section. ####

SHELL = /bin/sh

OBJECTS = vacall.o misc.o structcpy.o

all : $(OBJECTS) libvacall.a vacall.h $(srcdir)/vacall.3 $(srcdir)/vacall.html

vacall.o : vacall-$(CPU).o
	$(RM) vacall.o
	$(LN) vacall-$(CPU).o vacall.o

vacall-i386.o : vacall-i386.s
	$(CC) @GCC_X_NONE@ -c vacall-i386.s

vacall-i386.s : $(srcdir)/vacall-i386.S
	$(CPP) $(ASPFLAGS) $(srcdir)/vacall-i386.S | grep -v '^ *#line' | grep -v '^#ident' | grep -v '^#' | sed -e 's,% ,%,g' > vacall-i386.s

vacall-sparc.o : vacall-sparc.s
	$(CC) @GCC_X_NONE@ -c vacall-sparc.s

vacall-sparc.s : $(srcdir)/vacall-sparc.S
	$(CPP) $(ASPFLAGS) $(srcdir)/vacall-sparc.S > vacall-sparc.s

vacall-m68k.o : $(srcdir)/vacall-m68k.mit.s $(srcdir)/vacall-m68k.mot.s
	if test @AS_UNDERSCORE@ = true; then syntax=mit; else syntax=mot; fi; $(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-m68k.$${syntax}.s ; mv vacall-m68k.$${syntax}.o vacall-m68k.o

vacall-mips.o : $(srcdir)/vacall-mips.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-mips.s

vacall-mipsn32.o : $(srcdir)/vacall-mipsn32.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-mipsn32.s

vacall-mips64.o : $(srcdir)/vacall-mips64.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-mips64.s

vacall-alpha.o : $(srcdir)/vacall-alpha.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-alpha.s

vacall-hppa.o : $(srcdir)/vacall-hppa.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-hppa.s

vacall-arm.o : $(srcdir)/vacall-arm.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-arm.s

vacall-rs6000.o : $(srcdir)/vacall-rs6000-aix.old.s $(srcdir)/vacall-rs6000-aix.new.s $(srcdir)/vacall-rs6000-sysv4.s
	case "$(OS)" in aix3*) syntax=aix.old;; aix*) syntax=aix.new;; *) syntax=sysv4;; esac; $(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-rs6000-$${syntax}.s ; mv vacall-rs6000-$${syntax}.o vacall-rs6000.o

vacall-m88k.o : $(srcdir)/vacall-m88k.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-m88k.s

vacall-convex.o : $(srcdir)/vacall-convex.s
	$(CC) @GCC_X_NONE@ -c $(srcdir)/vacall-convex.s

misc.o : $(srcdir)/misc.c vacall.h config.h
	$(CC) $(CFLAGS) $(INCLUDES) -c $(srcdir)/misc.c

structcpy.o : $(srcdir)/structcpy.c
	$(CC) $(CFLAGS) -c $(srcdir)/structcpy.c

libvacall.a : $(OBJECTS)
	$(RM) libvacall.a
	$(AR) $(AR_FLAGS) libvacall.a $(OBJECTS)
	$(RANLIB) libvacall.a

install : all force
	if [ ! -d $(libdir) ] ; then mkdir $(libdir) ; fi
	$(INSTALL_DATA) libvacall.a $(libdir)/libvacall.a
	if [ ! -d $(includedir) ] ; then mkdir $(includedir) ; fi
	$(INSTALL_DATA) vacall.h $(includedir)/vacall.h
	if [ ! -d $(mandir) ] ; then mkdir $(mandir) ; fi
	if [ ! -d $(mandir)/man3 ] ; then mkdir $(mandir)/man3 ; fi
	$(INSTALL_DATA) $(srcdir)/vacall.3 $(mandir)/man3/vacall.3
	if [ ! -d $(mandir)/html ] ; then mkdir $(mandir)/html ; fi
	$(INSTALL_DATA) $(srcdir)/vacall.html $(mandir)/html/vacall.html

installdirs : force
	if [ ! -d $(libdir) ] ; then mkdir $(libdir) ; fi
	if [ ! -d $(includedir) ] ; then mkdir $(includedir) ; fi
	if [ ! -d $(mandir) ] ; then mkdir $(mandir) ; fi
	if [ ! -d $(mandir)/man3 ] ; then mkdir $(mandir)/man3 ; fi
	if [ ! -d $(mandir)/html ] ; then mkdir $(mandir)/html ; fi

uninstall : force
	$(RM) $(libdir)/libvacall.a
	$(RM) $(includedir)/vacall.h
	$(RM) $(mandir)/man3/vacall.3
	$(RM) $(mandir)/html/vacall.html

tests.o : $(srcdir)/tests.c vacall.h
	$(CC) $(CFLAGS) $(INCLUDES) -c $(srcdir)/tests.c

tests.s : $(srcdir)/tests.c vacall.h
	$(CC) $(CFLAGS) $(INCLUDES) -S $(srcdir)/tests.c

tests : tests.o $(OBJECTS)
	$(CC) $(CFLAGS) @GCC_X_NONE@ tests.o $(OBJECTS) -o tests

check : all tests
	./tests > tests.out
	uniq -u < tests.out > tests.output.$(HOST)
	test '!' -s tests.output.$(HOST)

mostlyclean : clean

clean : force
	$(RM) *.o *.a core
	$(RM) vacall-i386.s vacall-sparc.s
	$(RM) tests.o tests.s tests tests.out

distclean : clean
	$(RM) config.status config.log config.cache Makefile vacall.h config.h tests.output.*

maintainer-clean : distclean

force :

